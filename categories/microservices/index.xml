<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservices on ServiceMesher</title>
    <link>https://www.servicemesher.com/categories/microservices/</link>
    <description>Recent content in microservices on ServiceMesher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 02 Sep 2019 07:15:43 +0800</lastBuildDate>
    
	<atom:link href="https://www.servicemesher.com/categories/microservices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用spring boot&#43;kubernetes构建完整微服务平台</title>
      <link>https://www.servicemesher.com/blog/201909-build-full-micro-service-platform-by-spring-boot-with-kubernetes/</link>
      <pubDate>Mon, 02 Sep 2019 07:15:43 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/201909-build-full-micro-service-platform-by-spring-boot-with-kubernetes/</guid>
      <description>本文简述基于kubernetes的微服务平台建设思路及技术选型。</description>
    </item>
    
    <item>
      <title>微服务的设计模式</title>
      <link>https://www.servicemesher.com/blog/design-patterns-for-microservices/</link>
      <pubDate>Sat, 17 Aug 2019 22:00:05 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/design-patterns-for-microservices/</guid>
      <description>本文详细的介绍了微服务的多种设计模式。</description>
    </item>
    
    <item>
      <title>微服务中的熔断简介及工作原理详解（第2部分）</title>
      <link>https://www.servicemesher.com/blog/preventing-systemic-failure-circuit-breaking-part-2/</link>
      <pubDate>Mon, 20 May 2019 12:10:44 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/preventing-systemic-failure-circuit-breaking-part-2/</guid>
      <description>本文介绍了开发人员和运维人员两种不同视角下的微服务典型应用场景，对比了熔断功能的三种不同实现：Hystrix, Service Mesh (Istio、Linkerd) 和 Glasnostic。</description>
    </item>
    
    <item>
      <title>微服务通信的设计模式</title>
      <link>https://www.servicemesher.com/blog/design-patterns-for-microservice-communication/</link>
      <pubDate>Tue, 27 Nov 2018 19:29:05 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/design-patterns-for-microservice-communication/</guid>
      <description>本文详细的介绍了同步和异步模式下微服务间的通信模式。</description>
    </item>
    
    <item>
      <title>微服务中的Sidecar设计模式解析</title>
      <link>https://www.servicemesher.com/blog/sidecar-design-pattern-in-microservices-ecosystem/</link>
      <pubDate>Thu, 02 Aug 2018 15:32:40 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/sidecar-design-pattern-in-microservices-ecosystem/</guid>
      <description>Sidecar 设计模式已经越来越受欢迎，并在社区内得到更广泛的采用。构建具有高度可扩展性、弹性、安全性和可观察性的微服务架构具有挑战性。Service Mesh 架构的发展已经改变了游戏规则。它降低了与微服务架构相关的复杂性，并提供了许多功能，如负载平衡、服务发现、流量管理、熔断、遥测、故障注入等。</description>
    </item>
    
    <item>
      <title>速率限制系列part4—为Ambassador API网关设计速率限制服务</title>
      <link>https://www.servicemesher.com/blog/designing-a-rate-limiting-service-for-ambassador-part-4/</link>
      <pubDate>Wed, 11 Jul 2018 15:32:40 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/designing-a-rate-limiting-service-for-ambassador-part-4/</guid>
      <description>先前关于速率限制文章主要描述如何构建并部署基于Java的速率限制服务，该服务可以和开源的Ambassador API网关以及Kubernetes集成。 大家或许会疑惑怎么样才能更好地设计速率限制服务，尤其是如何保证Ambassador以及其底层的Envoy代理的灵活性？这篇文章将给大家启发。</description>
    </item>
    
    <item>
      <title>速率限制part3—基于Ambassador API网关实现Java速率限制服务</title>
      <link>https://www.servicemesher.com/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3/</link>
      <pubDate>Wed, 04 Jul 2018 12:26:02 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3/</guid>
      <description>在本速率限制系列的第三篇文章中，根据实际Java语言编写的案例带领我们使用Ambassador API网关速率限制入门，并将实例部署到Kubernetes中，同时使用Java语言演示基于令牌通算法的速率限制方式。</description>
    </item>
    
  </channel>
</rss>